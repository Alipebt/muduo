// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/student.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fstudent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fstudent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fstudent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
  class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fstudent_2eproto
{
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fstudent_2eproto;
namespace tutorial
{
  class Student;
  struct StudentDefaultTypeInternal;
  extern StudentDefaultTypeInternal _Student_default_instance_;
  class Student_PhoneNumber;
  struct Student_PhoneNumberDefaultTypeInternal;
  extern Student_PhoneNumberDefaultTypeInternal _Student_PhoneNumber_default_instance_;
} // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template <>
::tutorial::Student *Arena::CreateMaybeMessage<::tutorial::Student>(Arena *);
template <>
::tutorial::Student_PhoneNumber *Arena::CreateMaybeMessage<::tutorial::Student_PhoneNumber>(Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial
{

  enum Student_PhoneType : int
  {
    Student_PhoneType_MOBILE = 0,
    Student_PhoneType_HOME = 1,
    Student_PhoneType_Student_PhoneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
    Student_PhoneType_Student_PhoneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
  };
  bool Student_PhoneType_IsValid(int value);
  constexpr Student_PhoneType Student_PhoneType_PhoneType_MIN = Student_PhoneType_MOBILE;
  constexpr Student_PhoneType Student_PhoneType_PhoneType_MAX = Student_PhoneType_HOME;
  constexpr int Student_PhoneType_PhoneType_ARRAYSIZE = Student_PhoneType_PhoneType_MAX + 1;

  const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Student_PhoneType_descriptor();
  template <typename T>
  inline const std::string &Student_PhoneType_Name(T enum_t_value)
  {
    static_assert(::std::is_same<T, Student_PhoneType>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function Student_PhoneType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        Student_PhoneType_descriptor(), enum_t_value);
  }
  inline bool Student_PhoneType_Parse(
      ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Student_PhoneType *value)
  {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Student_PhoneType>(
        Student_PhoneType_descriptor(), name, value);
  }
  // ===================================================================

  class Student_PhoneNumber final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Student.PhoneNumber) */
  {
  public:
    inline Student_PhoneNumber() : Student_PhoneNumber(nullptr) {}
    ~Student_PhoneNumber() override;
    explicit PROTOBUF_CONSTEXPR Student_PhoneNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Student_PhoneNumber(const Student_PhoneNumber &from);
    Student_PhoneNumber(Student_PhoneNumber &&from) noexcept
        : Student_PhoneNumber()
    {
      *this = ::std::move(from);
    }

    inline Student_PhoneNumber &operator=(const Student_PhoneNumber &from)
    {
      CopyFrom(from);
      return *this;
    }
    inline Student_PhoneNumber &operator=(Student_PhoneNumber &&from) noexcept
    {
      if (this == &from)
        return *this;
      if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
          && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
      )
      {
        InternalSwap(&from);
      }
      else
      {
        CopyFrom(from);
      }
      return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
    {
      return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
    {
      return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
    {
      return default_instance().GetMetadata().reflection;
    }
    static const Student_PhoneNumber &default_instance()
    {
      return *internal_default_instance();
    }
    static inline const Student_PhoneNumber *internal_default_instance()
    {
      return reinterpret_cast<const Student_PhoneNumber *>(
          &_Student_PhoneNumber_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        0;

    friend void swap(Student_PhoneNumber &a, Student_PhoneNumber &b)
    {
      a.Swap(&b);
    }
    inline void Swap(Student_PhoneNumber *other)
    {
      if (other == this)
        return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() != nullptr &&
          GetOwningArena() == other->GetOwningArena())
      {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() == other->GetOwningArena())
      {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
        InternalSwap(other);
      }
      else
      {
        ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
      }
    }
    void UnsafeArenaSwap(Student_PhoneNumber *other)
    {
      if (other == this)
        return;
      GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
      InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Student_PhoneNumber *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
    {
      return CreateMaybeMessage<Student_PhoneNumber>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const Student_PhoneNumber &from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const Student_PhoneNumber &from)
    {
      Student_PhoneNumber::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    uint8_t *_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
    void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Student_PhoneNumber *other);

  private:
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
      return "tutorial.Student.PhoneNumber";
    }

  protected:
    explicit Student_PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                 bool is_message_owned = false);

  public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
      kNumberFieldNumber = 1,
      kTypeFieldNumber = 2,
    };
    // string number = 1;
    void clear_number();
    const std::string &number() const;
    template <typename ArgT0 = const std::string &, typename... ArgT>
    void set_number(ArgT0 &&arg0, ArgT... args);
    std::string *mutable_number();
    PROTOBUF_NODISCARD std::string *release_number();
    void set_allocated_number(std::string *number);

  private:
    const std::string &_internal_number() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_number(const std::string &value);
    std::string *_internal_mutable_number();

  public:
    // optional .tutorial.Student.PhoneType type = 2;
    bool has_type() const;

  private:
    bool _internal_has_type() const;

  public:
    void clear_type();
    ::tutorial::Student_PhoneType type() const;
    void set_type(::tutorial::Student_PhoneType value);

  private:
    ::tutorial::Student_PhoneType _internal_type() const;
    void _internal_set_type(::tutorial::Student_PhoneType value);

  public:
    // @@protoc_insertion_point(class_scope:tutorial.Student.PhoneNumber)
  private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
      ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
      mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
      int type_;
    };
    union
    {
      Impl_ _impl_;
    };
    friend struct ::TableStruct_protobuf_2fstudent_2eproto;
  };
  // -------------------------------------------------------------------

  class Student final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Student) */
  {
  public:
    inline Student() : Student(nullptr) {}
    ~Student() override;
    explicit PROTOBUF_CONSTEXPR Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Student(const Student &from);
    Student(Student &&from) noexcept
        : Student()
    {
      *this = ::std::move(from);
    }

    inline Student &operator=(const Student &from)
    {
      CopyFrom(from);
      return *this;
    }
    inline Student &operator=(Student &&from) noexcept
    {
      if (this == &from)
        return *this;
      if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
          && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
      )
      {
        InternalSwap(&from);
      }
      else
      {
        CopyFrom(from);
      }
      return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
    {
      return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
    {
      return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
    {
      return default_instance().GetMetadata().reflection;
    }
    static const Student &default_instance()
    {
      return *internal_default_instance();
    }
    static inline const Student *internal_default_instance()
    {
      return reinterpret_cast<const Student *>(
          &_Student_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        1;

    friend void swap(Student &a, Student &b)
    {
      a.Swap(&b);
    }
    inline void Swap(Student *other)
    {
      if (other == this)
        return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() != nullptr &&
          GetOwningArena() == other->GetOwningArena())
      {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
      if (GetOwningArena() == other->GetOwningArena())
      {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
        InternalSwap(other);
      }
      else
      {
        ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
      }
    }
    void UnsafeArenaSwap(Student *other)
    {
      if (other == this)
        return;
      GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
      InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    Student *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
    {
      return CreateMaybeMessage<Student>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const Student &from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const Student &from)
    {
      Student::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    uint8_t *_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
    int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
    void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena *arena, bool is_message_owned);
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Student *other);

  private:
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
    {
      return "tutorial.Student";
    }

  protected:
    explicit Student(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                     bool is_message_owned = false);

  public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    typedef Student_PhoneNumber PhoneNumber;

    typedef Student_PhoneType PhoneType;
    static constexpr PhoneType MOBILE =
        Student_PhoneType_MOBILE;
    static constexpr PhoneType HOME =
        Student_PhoneType_HOME;
    static inline bool PhoneType_IsValid(int value)
    {
      return Student_PhoneType_IsValid(value);
    }
    static constexpr PhoneType PhoneType_MIN =
        Student_PhoneType_PhoneType_MIN;
    static constexpr PhoneType PhoneType_MAX =
        Student_PhoneType_PhoneType_MAX;
    static constexpr int PhoneType_ARRAYSIZE =
        Student_PhoneType_PhoneType_ARRAYSIZE;
    static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
    PhoneType_descriptor()
    {
      return Student_PhoneType_descriptor();
    }
    template <typename T>
    static inline const std::string &PhoneType_Name(T enum_t_value)
    {
      static_assert(::std::is_same<T, PhoneType>::value ||
                        ::std::is_integral<T>::value,
                    "Incorrect type passed to function PhoneType_Name.");
      return Student_PhoneType_Name(enum_t_value);
    }
    static inline bool PhoneType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                                       PhoneType *value)
    {
      return Student_PhoneType_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    enum : int
    {
      kPhoneFieldNumber = 4,
      kNameFieldNumber = 2,
      kEmailFieldNumber = 3,
      kIdFieldNumber = 1,
    };
    // repeated .tutorial.Student.PhoneNumber phone = 4;
    int phone_size() const;

  private:
    int _internal_phone_size() const;

  public:
    void clear_phone();
    ::tutorial::Student_PhoneNumber *mutable_phone(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tutorial::Student_PhoneNumber> *
    mutable_phone();

  private:
    const ::tutorial::Student_PhoneNumber &_internal_phone(int index) const;
    ::tutorial::Student_PhoneNumber *_internal_add_phone();

  public:
    const ::tutorial::Student_PhoneNumber &phone(int index) const;
    ::tutorial::Student_PhoneNumber *add_phone();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tutorial::Student_PhoneNumber> &
    phone() const;

    // string name = 2;
    void clear_name();
    const std::string &name() const;
    template <typename ArgT0 = const std::string &, typename... ArgT>
    void set_name(ArgT0 &&arg0, ArgT... args);
    std::string *mutable_name();
    PROTOBUF_NODISCARD std::string *release_name();
    void set_allocated_name(std::string *name);

  private:
    const std::string &_internal_name() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string &value);
    std::string *_internal_mutable_name();

  public:
    // optional string email = 3;
    bool has_email() const;

  private:
    bool _internal_has_email() const;

  public:
    void clear_email();
    const std::string &email() const;
    template <typename ArgT0 = const std::string &, typename... ArgT>
    void set_email(ArgT0 &&arg0, ArgT... args);
    std::string *mutable_email();
    PROTOBUF_NODISCARD std::string *release_email();
    void set_allocated_email(std::string *email);

  private:
    const std::string &_internal_email() const;
    inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string &value);
    std::string *_internal_mutable_email();

  public:
    // uint64 id = 1;
    void clear_id();
    uint64_t id() const;
    void set_id(uint64_t value);

  private:
    uint64_t _internal_id() const;
    void _internal_set_id(uint64_t value);

  public:
    // @@protoc_insertion_point(class_scope:tutorial.Student)
  private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    struct Impl_
    {
      ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
      mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
      ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tutorial::Student_PhoneNumber> phone_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
      uint64_t id_;
    };
    union
    {
      Impl_ _impl_;
    };
    friend struct ::TableStruct_protobuf_2fstudent_2eproto;
  };
  // ===================================================================

  // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
  // Student_PhoneNumber

  // string number = 1;
  inline void Student_PhoneNumber::clear_number()
  {
    _impl_.number_.ClearToEmpty();
  }
  inline const std::string &Student_PhoneNumber::number() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Student.PhoneNumber.number)
    return _internal_number();
  }
  template <typename ArgT0, typename... ArgT>
  inline PROTOBUF_ALWAYS_INLINE void Student_PhoneNumber::set_number(ArgT0 &&arg0, ArgT... args)
  {

    _impl_.number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:tutorial.Student.PhoneNumber.number)
  }
  inline std::string *Student_PhoneNumber::mutable_number()
  {
    std::string *_s = _internal_mutable_number();
    // @@protoc_insertion_point(field_mutable:tutorial.Student.PhoneNumber.number)
    return _s;
  }
  inline const std::string &Student_PhoneNumber::_internal_number() const
  {
    return _impl_.number_.Get();
  }
  inline void Student_PhoneNumber::_internal_set_number(const std::string &value)
  {

    _impl_.number_.Set(value, GetArenaForAllocation());
  }
  inline std::string *Student_PhoneNumber::_internal_mutable_number()
  {

    return _impl_.number_.Mutable(GetArenaForAllocation());
  }
  inline std::string *Student_PhoneNumber::release_number()
  {
    // @@protoc_insertion_point(field_release:tutorial.Student.PhoneNumber.number)
    return _impl_.number_.Release();
  }
  inline void Student_PhoneNumber::set_allocated_number(std::string *number)
  {
    if (number != nullptr)
    {
    }
    else
    {
    }
    _impl_.number_.SetAllocated(number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.number_.IsDefault())
    {
      _impl_.number_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tutorial.Student.PhoneNumber.number)
  }

  // optional .tutorial.Student.PhoneType type = 2;
  inline bool Student_PhoneNumber::_internal_has_type() const
  {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    return value;
  }
  inline bool Student_PhoneNumber::has_type() const
  {
    return _internal_has_type();
  }
  inline void Student_PhoneNumber::clear_type()
  {
    _impl_.type_ = 0;
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  inline ::tutorial::Student_PhoneType Student_PhoneNumber::_internal_type() const
  {
    return static_cast<::tutorial::Student_PhoneType>(_impl_.type_);
  }
  inline ::tutorial::Student_PhoneType Student_PhoneNumber::type() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Student.PhoneNumber.type)
    return _internal_type();
  }
  inline void Student_PhoneNumber::_internal_set_type(::tutorial::Student_PhoneType value)
  {
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.type_ = value;
  }
  inline void Student_PhoneNumber::set_type(::tutorial::Student_PhoneType value)
  {
    _internal_set_type(value);
    // @@protoc_insertion_point(field_set:tutorial.Student.PhoneNumber.type)
  }

  // -------------------------------------------------------------------

  // Student

  // uint64 id = 1;
  inline void Student::clear_id()
  {
    _impl_.id_ = uint64_t{0u};
  }
  inline uint64_t Student::_internal_id() const
  {
    return _impl_.id_;
  }
  inline uint64_t Student::id() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Student.id)
    return _internal_id();
  }
  inline void Student::_internal_set_id(uint64_t value)
  {

    _impl_.id_ = value;
  }
  inline void Student::set_id(uint64_t value)
  {
    _internal_set_id(value);
    // @@protoc_insertion_point(field_set:tutorial.Student.id)
  }

  // string name = 2;
  inline void Student::clear_name()
  {
    _impl_.name_.ClearToEmpty();
  }
  inline const std::string &Student::name() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Student.name)
    return _internal_name();
  }
  template <typename ArgT0, typename... ArgT>
  inline PROTOBUF_ALWAYS_INLINE void Student::set_name(ArgT0 &&arg0, ArgT... args)
  {

    _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:tutorial.Student.name)
  }
  inline std::string *Student::mutable_name()
  {
    std::string *_s = _internal_mutable_name();
    // @@protoc_insertion_point(field_mutable:tutorial.Student.name)
    return _s;
  }
  inline const std::string &Student::_internal_name() const
  {
    return _impl_.name_.Get();
  }
  inline void Student::_internal_set_name(const std::string &value)
  {

    _impl_.name_.Set(value, GetArenaForAllocation());
  }
  inline std::string *Student::_internal_mutable_name()
  {

    return _impl_.name_.Mutable(GetArenaForAllocation());
  }
  inline std::string *Student::release_name()
  {
    // @@protoc_insertion_point(field_release:tutorial.Student.name)
    return _impl_.name_.Release();
  }
  inline void Student::set_allocated_name(std::string *name)
  {
    if (name != nullptr)
    {
    }
    else
    {
    }
    _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.name_.IsDefault())
    {
      _impl_.name_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tutorial.Student.name)
  }

  // optional string email = 3;
  inline bool Student::_internal_has_email() const
  {
    bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
    return value;
  }
  inline bool Student::has_email() const
  {
    return _internal_has_email();
  }
  inline void Student::clear_email()
  {
    _impl_.email_.ClearToEmpty();
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  inline const std::string &Student::email() const
  {
    // @@protoc_insertion_point(field_get:tutorial.Student.email)
    return _internal_email();
  }
  template <typename ArgT0, typename... ArgT>
  inline PROTOBUF_ALWAYS_INLINE void Student::set_email(ArgT0 &&arg0, ArgT... args)
  {
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:tutorial.Student.email)
  }
  inline std::string *Student::mutable_email()
  {
    std::string *_s = _internal_mutable_email();
    // @@protoc_insertion_point(field_mutable:tutorial.Student.email)
    return _s;
  }
  inline const std::string &Student::_internal_email() const
  {
    return _impl_.email_.Get();
  }
  inline void Student::_internal_set_email(const std::string &value)
  {
    _impl_._has_bits_[0] |= 0x00000001u;
    _impl_.email_.Set(value, GetArenaForAllocation());
  }
  inline std::string *Student::_internal_mutable_email()
  {
    _impl_._has_bits_[0] |= 0x00000001u;
    return _impl_.email_.Mutable(GetArenaForAllocation());
  }
  inline std::string *Student::release_email()
  {
    // @@protoc_insertion_point(field_release:tutorial.Student.email)
    if (!_internal_has_email())
    {
      return nullptr;
    }
    _impl_._has_bits_[0] &= ~0x00000001u;
    auto *p = _impl_.email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.email_.IsDefault())
    {
      _impl_.email_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    return p;
  }
  inline void Student::set_allocated_email(std::string *email)
  {
    if (email != nullptr)
    {
      _impl_._has_bits_[0] |= 0x00000001u;
    }
    else
    {
      _impl_._has_bits_[0] &= ~0x00000001u;
    }
    _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.email_.IsDefault())
    {
      _impl_.email_.Set("", GetArenaForAllocation());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:tutorial.Student.email)
  }

  // repeated .tutorial.Student.PhoneNumber phone = 4;
  inline int Student::_internal_phone_size() const
  {
    return _impl_.phone_.size();
  }
  inline int Student::phone_size() const
  {
    return _internal_phone_size();
  }
  inline void Student::clear_phone()
  {
    _impl_.phone_.Clear();
  }
  inline ::tutorial::Student_PhoneNumber *Student::mutable_phone(int index)
  {
    // @@protoc_insertion_point(field_mutable:tutorial.Student.phone)
    return _impl_.phone_.Mutable(index);
  }
  inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tutorial::Student_PhoneNumber> *
  Student::mutable_phone()
  {
    // @@protoc_insertion_point(field_mutable_list:tutorial.Student.phone)
    return &_impl_.phone_;
  }
  inline const ::tutorial::Student_PhoneNumber &Student::_internal_phone(int index) const
  {
    return _impl_.phone_.Get(index);
  }
  inline const ::tutorial::Student_PhoneNumber &Student::phone(int index) const
  {
    // @@protoc_insertion_point(field_get:tutorial.Student.phone)
    return _internal_phone(index);
  }
  inline ::tutorial::Student_PhoneNumber *Student::_internal_add_phone()
  {
    return _impl_.phone_.Add();
  }
  inline ::tutorial::Student_PhoneNumber *Student::add_phone()
  {
    ::tutorial::Student_PhoneNumber *_add = _internal_add_phone();
    // @@protoc_insertion_point(field_add:tutorial.Student.phone)
    return _add;
  }
  inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tutorial::Student_PhoneNumber> &
  Student::phone() const
  {
    // @@protoc_insertion_point(field_list:tutorial.Student.phone)
    return _impl_.phone_;
  }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
  // -------------------------------------------------------------------

  // @@protoc_insertion_point(namespace_scope)

} // namespace tutorial

PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::tutorial::Student_PhoneType> : ::std::true_type
{
};
template <>
inline const EnumDescriptor *GetEnumDescriptor<::tutorial::Student_PhoneType>()
{
  return ::tutorial::Student_PhoneType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fstudent_2eproto
